/**
 * Mule FWS Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.quickbooks;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.ws.rs.DefaultValue;

import org.apache.commons.lang.NotImplementedException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.lifecycle.Start;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.modules.quickbooks.api.DefaultQuickBooksClient;

import com.sun.jndi.toolkit.url.Uri;


@Module(name = "quickbooks",
        namespace = "http://repository.mulesoft.org/releases/org/mule/modules/mule-module-quick-books",
        schemaLocation = "http://repository.mulesoft.org/releases/org/mule/modules/mule-module-quick-books/1.0-SNAPSHOT/mule-quickbooks.xsd")
public class QuickBooksModule
{
    @Configurable
    private String realmId;
    
    @Configurable
    private String consumerKey;
    
    @Configurable
    private String consumerSecret;
    
    @Configurable
    private String accessKey;
    
    @Configurable
    private String accessSecret;
    
    private DefaultQuickBooksClient client;
    
    @Processor
    public void createAccount(@Optional String parentIdType, String name, @Optional String desc,
                              /*QboAccountDetailTypeEnum*/Enum subtype, @Optional String acctNum,
                              @Optional Double openingBalance, @Optional Date openingBalanceDate) //Map<String,Address> address)
    {
//        Map<String, Object> m = null;
//        Address a = new Address();
//        PropertyUtils.copyProperties(new LazyDynaMap(m), a);
        
        
        
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createBill(Map<String, Object> header, List<Map<String, Object>> line)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createBillPayment(Map<String, Object> header, List<Map<String, Object>> line)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createCashPurchase(Map<String, Object> header, List<Map<String, Object>> line)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createCheck(Map<String, Object> header, List<Map<String, Object>> line)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createCreditCardChange(Map<String, Object> header, List<Map<String, Object>> line)
    {
        throw new NotImplementedException();
        //client.create(null);
    }

    @Processor
    public void createCustomer(@Optional String name, @Optional String givenName, @Optional String middleName,
                               @Optional String familyName, @Optional String suffix, @Optional String dBAName,
                               @Optional String showAs, List<Uri> webSite, @Optional String salesTermId,
                               @Optional String salesTaxCodeId, List<String> email, List<Map<String, Object>> phone,
                               Map<String, Object> address)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createEstimate(Map<String, Object> header, List<Map<String, Object>> line)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createInvoice(Map<String, Object> header, List<Map<String, Object>> line)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createItem(@Optional @Default("") String name, Map<String,Object> unitPrice, @Optional String desc,
                           @Optional @Default("false") boolean tasable, Map<String, Object> incomeAccountRef,
                           String itemParentId, String itemParentName, @Optional String purchaseDesc,
                           Map<String, Object> purchaseCost, Map<String, Object> expenseAccountRef)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createPayment(Map<String, Object> header, List<Map<String, Object>> line)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createPaymentMethod(String name, @Optional @Default("NON_CREDIT_CARD") String type)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createSalesReceipt(Map<String, Object> header, List<Map<String, Object>> line)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createSalesTerm(String name, Integer dueDays, @Optional Integer discountDay,
                                @Optional Double discountPercent, Integer dayOfMonthDue,
                                @Optional Integer dueNextMonthDays, @Optional Integer discountDayOfMonth,
                                @Optional Double dateDiscountPercent)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void createVendor(String name, String givenName, @Optional String middleName, @Optional String familyName,
                             @Optional String dBAName, @Optional String showAs, List<Uri> webSite,
                             @Optional Integer taxIdentifier, @Optional String acctNum, @Optional Boolean vendor1099,
                             List<String> email, List<Map<String, Object>> phone, Map<String, Object> address)
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public Object getObject(String type, String objectId)
    {
        return client.getObject(type, objectId);
    }

    @Processor
    public void updateAccount(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updateBill(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updateBillPayment(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updateCashPurchase(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updateCheck(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updateCreditCardChange(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updateCustomer(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updateEstimate(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updateInvoice(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updateItem(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updatePayment(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updatePaymentMethod(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updateSalesReceipt(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updateSalesTerm(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void updateVendor(String a )
    {
        throw new NotImplementedException();
        //client.create(null);
    }
    
    @Processor
    public void deleteObject(String type, String objectId)
    {
        client.deleteObject(type, objectId);
    }

    public List<Object> findObjects()
    {
        return client.findObjects();
    }
    
    /**
     * 
     */
    @Start
    public void init()
    {

        if (client == null )
        {
            client = new DefaultQuickBooksClient(realmId, consumerKey, consumerSecret, accessKey, accessSecret);
        }
    }
    
    /**
     * Sets the realmId. 
     *
     * @param realmId  with the realmId.
     */

    public void setRealmId(String realmId)
    {
        this.realmId = realmId;
    }
    /**
     * Returns the realmId.
     * 
     * @return  with the realmId.
     */

    public String getRealmId()
    {
        return realmId;
    }

    /**
     * Returns the consumerKey.
     * 
     * @return  with the consumerKey.
     */
    
    public String getConsumerKey()
    {
        return consumerKey;
    }

    /**
     * Sets the consumerKey. 
     *
     * @param consumerKey  with the consumerKey.
     */
    
    public void setConsumerKey(String consumerKey)
    {
        this.consumerKey = consumerKey;
    }

    /**
     * Returns the consumerSecret.
     * 
     * @return  with the consumerSecret.
     */
    
    public String getConsumerSecret()
    {
        return consumerSecret;
    }

    /**
     * Sets the consumerSecret. 
     *
     * @param consumerSecret  with the consumerSecret.
     */
    
    public void setConsumerSecret(String consumerSecret)
    {
        this.consumerSecret = consumerSecret;
    }

    /**
     * Returns the accessKey.
     * 
     * @return  with the accessKey.
     */
    
    public String getAccessKey()
    {
        return accessKey;
    }

    /**
     * Sets the accessKey. 
     *
     * @param accessKey  with the accessKey.
     */
    
    public void setAccessKey(String accessKey)
    {
        this.accessKey = accessKey;
    }

    /**
     * Returns the accessSecret.
     * 
     * @return  with the accessSecret.
     */
    
    public String getAccessSecret()
    {
        return accessSecret;
    }

    /**
     * Sets the accessSecret. 
     *
     * @param accessSecret  with the accessSecret.
     */
    
    public void setAccessSecret(String accessSecret)
    {
        this.accessSecret = accessSecret;
    }
    
}

/*
 *             OAuthConsumer consumer = new DefaultOAuthConsumer(
                consumerKey,
                consumerSecret);

            OAuthProvider p; new DefaultOAuthProvider(requestTokenEndpointUrl, accessTokenEndpointUrl, authorizationWebsiteUrl);
            OAuthProvider provider = new DefaultOAuthProvider(
                "https://oauth.intuit.com/oauth/v1/get_request_token",
                "https://oauth.intuit.com/oauth/v1/get_access_token",
                "https://workplace.intuit.com/app/Account/DataSharing/Authorize");
            try
            {
                // we do not support callbacks, thus pass OOB
                String authUrl = provider.retrieveRequestToken(consumer, OAuth.OUT_OF_BAND);
    
                System.out.println("Now visit:\n" + authUrl
                    + "\n... and grant this app authorization");
                System.out.println("Enter the PIN code and hit ENTER when you're done:");
    
                BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
                String pin = br.readLine();
                provider.retrieveAccessToken(consumer, pin);
    
                URL url = new URL("https://workplace.intuit.com/db/main?a=API_GetUserInfo");
                HttpsURLConnection request = (HttpsURLConnection) url.openConnection();
                
                consumer.sign(request);
                
                request.connect();
            }
            catch (Exception e)
            {
                return;
            }*/
