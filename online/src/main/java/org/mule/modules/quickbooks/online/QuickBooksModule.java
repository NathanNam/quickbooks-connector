/**
 * Mule QuickBooks Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.quickbooks.online;

import javax.annotation.PostConstruct;

import org.apache.commons.lang.StringUtils;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.modules.quickbooks.api.exception.QuickBooksRuntimeException;
import org.mule.modules.quickbooks.api.model.UserInformation;
import org.mule.modules.quickbooks.online.api.DefaultQuickBooksOnlineClient;
import org.mule.modules.quickbooks.online.api.QuickBooksOnlineClient;
import org.mule.modules.quickbooks.online.schema.Account;
import org.mule.modules.quickbooks.online.schema.Bill;
import org.mule.modules.quickbooks.online.schema.BillPayment;
import org.mule.modules.quickbooks.online.schema.CashPurchase;
import org.mule.modules.quickbooks.online.schema.Check;
import org.mule.modules.quickbooks.online.schema.CreditCardCharge;
import org.mule.modules.quickbooks.online.schema.Customer;
import org.mule.modules.quickbooks.online.schema.Estimate;
import org.mule.modules.quickbooks.online.schema.IdType;
import org.mule.modules.quickbooks.online.schema.Invoice;
import org.mule.modules.quickbooks.online.schema.Item;
import org.mule.modules.quickbooks.online.schema.Payment;
import org.mule.modules.quickbooks.online.schema.PaymentMethod;
import org.mule.modules.quickbooks.online.schema.SalesReceipt;
import org.mule.modules.quickbooks.online.schema.SalesTerm;
import org.mule.modules.quickbooks.online.schema.Vendor;

/**
 * QuickBooks software provides an interface that allows you to use forms such as checks, deposit slips and invoices,
 * making the accounting process more comfortable for the average business owner or manager. By using the built-in
 * functions that pertain to your business, you are able to perform your company accounting by simply recording your
 * vendor activities, customer activities, banking transactions, payroll checks and taxes. QuickBooks handles the
 * accounting portion of each transaction behind the scenes.
 *
 * Read more: QuickBooks Accounting Tutorial | eHow.com http://www.ehow.com/way_5462311_quickbooks-accounting-tutorial.html#ixzz1csaydwxl
 * @author MuleSoft, inc.
 */
@Module(name = "quickbooks", schemaVersion= "3.0", friendlyName = "Quickbooks Online")
public class QuickBooksModule
{   
    /**
     * Quick-Books client. By default uses DefaultQuickBooksOnlineClient class.
     */
    @Configurable
    @Optional
    private QuickBooksOnlineClient client;

    /**
     * The base uri of the quickbooks endpoint,
     * used to fetch the company uri. 
     * 
     * Quickbooks connector will first use this uri and the realmId to
     * get a second uri, called company uri, 
     * which is the actual quickbooks endpoint for the connector 
     *  
     */
    @Optional
    @Default("https://qbo.intuit.com/qbo1/rest/user/v2")
    @Configurable
    private String baseUri;
    
    /**
     * Service Provider Id
     * This parameter depends on your IPP account
     */
    @Configurable
    private String serviceProviderId;
    
    /**
     * Creates an Account.
     * The Account object represents the accounts that you keep to track your business.
     * Account is a component of a chart of accounts, and is part of a ledger.
     * You can use Account to record the total monetary amount that is allocated for a specific use.
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Account">Account Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-account}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param account   The Quickbooks account to be created.
     * @return The created Account.
     */
    @Processor
    public Account createAccount(String realmId,
                                 String appKey,
                                 String realmIdPseudonym, String authIdPseudonym,
                                 @Optional @Default("#[payload]") Account account)
    {
        
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, account);
    }
    
    /**
     * Creates a Bill.
     * The Bill object represents an expense to the business.
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Bill">Bill Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-bill}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param bill The bill to be created
     * @return The created Bill.
     */
    @Processor
    public Bill createBill(String realmId,
                           String appKey,
                           String realmIdPseudonym, String authIdPseudonym,
                           @Optional @Default("#[payload]") Bill bill)
    {
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, bill);
    }
    
    /**
     * Creates a BillPayment.
     * BillPayment represents the financial transaction of payment of bills that the business owner receives
     * from a vendor for goods or services purchased from the vendor.
     * QBO supports bill payments through a credit card or a bank account.
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/BillPayment">BillPayment Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-bill-payment}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param billPayment The bill payment object
     * @return The created BillPayment.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public BillPayment createBillPayment(String realmId,
                                         String appKey,
                                         String realmIdPseudonym, String authIdPseudonym,
                                         @Optional @Default("#[payload]") BillPayment billPayment)
    {    
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, billPayment);
    }
    
    /**
     * Creates a CashPurchase.
     * CashPurchase represents an expense to the business as a cash transaction.
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/CashPurchase">CashPurchase Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-cash-purchase}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param cashPurchase The cash purchase to be created
     * @return The created CashPurchase.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public CashPurchase createCashPurchase(String realmId,
                                           String appKey,
                                           String realmIdPseudonym, String authIdPseudonym,
                                           @Optional @Default("#[payload]") CashPurchase cashPurchase)
    {
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, cashPurchase);
    }
    
    /**
     * Creates a Check.
     * The Check object represents an expense to the business paid as a check transaction.
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Check">Check Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-check}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param check The check to be created
     * @return The created Check.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Check createCheck(String realmId,
                             String appKey,
                             String realmIdPseudonym, String authIdPseudonym,
                             @Optional @Default("#[payload]") Check check)
    {
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, check);
    }
    
    /**
     * Creates a CreditCardCharge.
     * The CreditCardCharge object represents an expense to the business as a credit card charge 
     * transaction. CreditCardCharge must have the total expense equal to the total expense of 
     * line items.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/CreditCardCharge">CreditCardCharge Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-credit-card-charge}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param creditCardCharge The credit card charge to be created
     * @return The created CreditCardCharge.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public CreditCardCharge createCreditCardCharge(String realmId,
                                                   String appKey,
                                                   String realmIdPseudonym, String authIdPseudonym,
                                                   @Optional @Default("#[payload]") CreditCardCharge creditCardCharge)
    {
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, creditCardCharge);
    }

    /**
     * Creates a Customer.
     * The Customer object represents the consumer of the service or the product that your business offers. 
     * QBO allows categorizing the customers in a way that is meaningful to the business.
     *
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Customer">Customer Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-customer}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param customer The customer to be created
     * @return The created Customer.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Customer createCustomer(String realmId,
                                   String appKey,
                                   String realmIdPseudonym, String authIdPseudonym,
                                   @Optional @Default("#[payload]") Customer customer)
    {
        if(customer.getPaymentMethodId() != null && (customer.getPaymentMethodId().getValue().isEmpty() 
                || StringUtils.isEmpty(customer.getPaymentMethodId().getValue())))
        {
            customer.setPaymentMethodId(new IdType());
        }
        
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, customer);
    }
    
    /**
     * Creates an Estimate.
     * The Estimate object represents a proposal for a financial transaction from a business to a customer 
     * for goods or services proposed to be sold, including proposed pricing. It is also known as quote.
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Estimate">Estimate Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-estimate}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param estimate The estimate to be created
     * @return The created Estimate.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Estimate createEstimate(String realmId,
                                   String appKey,
                                   String realmIdPseudonym, String authIdPseudonym,
                                   @Optional @Default("#[payload]") Estimate estimate)
    {
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, estimate);
    }
    
    /**
     * Creates an Invoice.
     * The Invoice object represents an invoice to a customer. Invoice could be based on salesterm 
     * with invoice and due dates for payment. Invoice supports tax, but as of now shipping charges 
     * are not supported. Invoice can be printed and emailed to a customer.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Invoice">Invoice Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-invoice}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param invoice The invoice to be created
     * @return The created Invoice.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Invoice createInvoice(String realmId,
                                 String appKey,
                                 String realmIdPseudonym, String authIdPseudonym,
                                 @Optional @Default("#[payload]") Invoice invoice)
    {
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, invoice);
    }
    
    /**
     * Creates an Item.
     * The Item object represents any product or service that is sold or purchased. Inventory items 
     * are not currently supported.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Item">Item Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-item}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param item The item to be created
     * @return The created Item.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Item createItem(String realmId,
                           String appKey,
                           String realmIdPseudonym, String authIdPseudonym,
                           @Optional @Default("#[payload]") Item item)
    {
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, item);
    }
    
    /**
     * Creates a Payment.
     * The Payment object  represents the financial transaction that signifies a payment from a customer 
     * for one or more sales transactions.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Payment">Payment Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-payment}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param payment The payment to be created
     * @return The created Payment.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Payment createPayment(String realmId,
                                 String appKey,
                                 String realmIdPseudonym, String authIdPseudonym,
                                 @Optional @Default("#[payload]") Payment payment)
    {
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, payment);
    }
    
    /**
     * Creates a PaymentMethod.
     * PaymentMethod represents the method of payment for a transaction. It can be a credit card 
     * payment type or a non-credit card payment type.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/PaymentMethod">PaymentMethod Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-payment-method}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param paymentMethod The payment method to be created
     * @return The created PaymentMethod.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public PaymentMethod createPaymentMethod(String realmId,
                                             String appKey,
                                             String realmIdPseudonym, String authIdPseudonym,
                                             @Optional @Default("#[payload]") PaymentMethod paymentMethod)
    {
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, paymentMethod);
    }
    
    /**
     * Creates a SalesReceipt.
     * The Payment object  represents the financial transaction that signifies a payment from a customer 
     * for one or more sales transactions.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/SalesReceipt">SalesReceipt Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-sales-receipt}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param salesReceipt The sales receipt to be created
     * @return The created SalesReceipt.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public SalesReceipt createSalesReceipt(String realmId,
                                           String appKey,
                                           String realmIdPseudonym, String authIdPseudonym,
                                           @Optional @Default("#[payload]") SalesReceipt salesReceipt)
    {
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, salesReceipt);
    }
    
    /**
     * Creates a SalesTerm.
     * The SalesTerm object  represents the terms under which a sale is made. SalesTerm is typically 
     * expressed in the form of days due after the goods are received. There is an optional discount 
     * part of the sales term, where a discount of total amount can automatically be applied if 
     * payment is made within a few days of the stipulated time.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/SalesTerm">SalesTerm Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-sales-term}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param salesTerm The sales term to be created
     * @return The created SalesTerm.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public SalesTerm createSalesTerm(String realmId,
                                     String appKey,
                                     String realmIdPseudonym, String authIdPseudonym,
                                     @Optional @Default("#[payload]") SalesTerm salesTerm)
    {
        
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, salesTerm);
    }
    
    /**
     * Creates a Vendor.
     * The Vendor object represents the buyer from whom you purchase any service or product 
     * for your organization.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Vendor">Vendor Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:create-vendor}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param vendor The vendor to be created
     * @return The created Vendor.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Vendor createVendor(String realmId,
                               String appKey,
                               String realmIdPseudonym, String authIdPseudonym,
                               @Optional @Default("#[payload]") Vendor vendor)
    {
        return client.create(realmId, appKey, realmIdPseudonym, authIdPseudonym, vendor);
    }
    
    /**
     * Retrieve objects by ID.
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:get-object}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param type EntityType of the object.
     * @param id Id which is assigned by Data Services when the object is created.
     * @return The object.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Object getObject(String realmId,
                            String appKey,
                            String realmIdPseudonym, String authIdPseudonym,
                            OnlineEntityType type,
                            @Optional @Default("#[payload]") IdType id)
    {
        return client.getObject(realmId, appKey, realmIdPseudonym, authIdPseudonym,type, id);
    }

    /**
     * Updates an Account
     * The Account object represents the accounts that you keep to track your business.
     * Account is a component of a chart of accounts, and is part of a ledger.
     * You can use Account to record the total monetary amount that is allocated for a specific use.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Account">Account Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-account}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param account The account to be updated
     * @return The updated Account.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Account updateAccount(String realmId,
                                 String appKey,
                                 String realmIdPseudonym, String authIdPseudonym,
                                 @Optional @Default("#[payload]") Account account)
    {   
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.ACCOUNT, account);
    }
    
    /**
     * Updates a Bill
     * The Bill object represents an expense to the business. 
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Bill">Bill Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-bill}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param bill The bill to be updated
     * @return The updated Bill.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Bill updateBill(String realmId,
                           String appKey,
                           String realmIdPseudonym, String authIdPseudonym,
                           @Optional @Default("#[payload]") Bill bill)
    {
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.BILL, bill);
    }
    
    /**
     * Updates a BillPayment
     * BillPayment represents the financial transaction of payment of bills that the business owner receives
     * from a vendor for goods or services purchased from the vendor.
     * QBO supports bill payments through a credit card or a bank account.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/BillPayment">BillPayment Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-bill-payment}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param billPayment Bill payment to be updated
     * @return The updated BillPayment.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public BillPayment updateBillPayment(String realmId,
                                         String appKey,
                                         String realmIdPseudonym, String authIdPseudonym,
                                         @Optional @Default("#[payload]") BillPayment billPayment)
    {    
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.BILLPAYMENT, billPayment);
    }
    
    /**
     * Updates a CashPurchase.
     * CashPurchase represents an expense to the business as a cash transaction.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/CashPurchase">CashPurchase Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-cash-purchase}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param cashPurchase The cash purchase to be updated
     * @return The updated CashPurchase.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public CashPurchase updateCashPurchase(String realmId,
                                           String appKey,
                                           String realmIdPseudonym, String authIdPseudonym,
                                           @Optional @Default("#[payload]") CashPurchase cashPurchase)
    {
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.CASHPURCHASE, cashPurchase);
    }
    
    /**
     * Updates a Check.
     * The Check object represents an expense to the business paid as a check transaction.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Check">Check Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-check}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param check The check to be updated
     * @return The updated Check.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Check updateCheck(String realmId,
                             String appKey,
                             String realmIdPseudonym, String authIdPseudonym,
                             @Optional @Default("#[payload]") Check check)
    {
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.CHECK, check);
    }
    
    /**
     * Updates a CreditCardCharge.
     * The CreditCardCharge object represents an expense to the business as a credit card charge 
     * transaction. CreditCardCharge must have the total expense equal to the total expense of 
     * line items.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/CreditCardCharge">CreditCardCharge Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-credit-card-charge}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param creditCardCharge The credit card charge to be updated
     * @return The updated CreditCardCharge.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public CreditCardCharge updateCreditCardCharge(String realmId,
                                                   String appKey,
                                                   String realmIdPseudonym, String authIdPseudonym,
                                                   @Optional @Default("#[payload]") CreditCardCharge creditCardCharge)
    {
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.CREDITCARDCHARGE, 
                creditCardCharge);
    }

    /**
     * Updates a Customer.
     * The Customer object represents the consumer of the service or the product that your business offers. 
     * QBO allows categorizing the customers in a way that is meaningful to the business.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Customer">Customer Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-customer}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param customer The customer to be updated
     * @return The updated Customer.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Customer updateCustomer(String realmId,
                                   String appKey,
                                   String realmIdPseudonym, String authIdPseudonym,
                                   @Optional @Default("#[payload]") Customer customer)
    {
        if(customer.getPaymentMethodId() != null && (customer.getPaymentMethodId().getValue().isEmpty() 
                || StringUtils.isEmpty(customer.getPaymentMethodId().getValue())))
        {
            customer.setPaymentMethodId(new IdType());
        }

        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.CUSTOMER, customer);        
    }
    
    /**
     * Updates an Estimate.
     * The Estimate object represents a proposal for a financial transaction from a business to a customer 
     * for goods or services proposed to be sold, including proposed pricing. It is also known as quote.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Estimate">Estimate Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-estimate}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param estimate The estimate to be updated
     * @return The updated Estimate.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Estimate updateEstimate(String realmId,
                                   String appKey,
                                   String realmIdPseudonym, String authIdPseudonym,
                                   @Optional @Default("#[payload]") Estimate estimate)
    {
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.ESTIMATE, estimate);
    }
    
    /**
     * Updates an Invoice.
     * The Invoice object represents an invoice to a customer. Invoice could be based on salesterm 
     * with invoice and due dates for payment. Invoice supports tax, but as of now shipping charges 
     * are not supported. Invoice can be printed and emailed to a customer.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Invoice">Invoice Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-invoice}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param invoice The invoice to be updated
     * @return The updated Invoice.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Invoice updateInvoice(String realmId,
                                 String appKey,
                                 String realmIdPseudonym, String authIdPseudonym,
                                 @Optional @Default("#[payload]") Invoice invoice)
    {
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.INVOICE, invoice);
    }
    
    /**
     * Updates an Item.
     * The Item object represents any product or service that is sold or purchased. Inventory items 
     * are not currently supported.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Item">Item Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-item}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param item The item to be updated
     * @return The updated Item.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Item updateItem(String realmId,
                           String appKey,
                           String realmIdPseudonym, String authIdPseudonym,
                           @Optional @Default("#[payload]") Item item)
    {
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.ITEM, item);
    }
    
    /**
     * Updates a Payment.
     * The Payment object  represents the financial transaction that signifies a payment from a customer 
     * for one or more sales transactions.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Payment">Payment Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-payment}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param payment The payment to be updated
     * @return The updated Payment.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public Payment updatePayment(String realmId,
                                 String appKey,
                                 String realmIdPseudonym, String authIdPseudonym,
                                 @Optional @Default("#[payload]") Payment payment)
    {
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.PAYMENT, payment);
    }
    
    /**
     * Updates a PaymentMethod.
     * PaymentMethod represents the method of payment for a transaction. It can be a credit card 
     * payment type or a non-credit card payment type.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/PaymentMethod">PaymentMethod Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-payment-method}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param paymentMethod The payment method to be updated
     * @return The updated PaymentMethod.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public PaymentMethod updatePaymentMethod(String realmId,
                                             String appKey,
                                             String realmIdPseudonym, String authIdPseudonym,
                                             @Optional @Default("#[payload]") PaymentMethod paymentMethod)
    {
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.PAYMENTMETHOD, paymentMethod);
    }
    
    /**
     * Updates a SalesReceipt.
     * The Payment object  represents the financial transaction that signifies a payment from a customer 
     * for one or more sales transactions.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/SalesReceipt">SalesReceipt Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-sales-receipt}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param salesReceipt The sales receipt
     * @return The updated SalesReceipt.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public SalesReceipt updateSalesReceipt(String realmId,
                                           String appKey,
                                           String realmIdPseudonym, String authIdPseudonym,
                                           @Optional @Default("#[payload]") SalesReceipt salesReceipt)
    {
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.SALESRECEIPT, salesReceipt);
    }
    
    /**
     * Updates a SalesTerm.
     * The SalesTerm object  represents the terms under which a sale is made. SalesTerm is typically 
     * expressed in the form of days due after the goods are received. There is an optional discount 
     * part of the sales term, where a discount of total amount can automatically be applied if 
     * payment is made within a few days of the stipulated time.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/SalesTerm">SalesTerm Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-sales-term}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param salesTerm The sales term to be updated
     * @return The updated SalesTerm.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @Processor
    public SalesTerm updateSalesTerm(String realmId,
                                     String appKey,
                                     String realmIdPseudonym, String authIdPseudonym,
                                     @Optional @Default("#[payload]") SalesTerm salesTerm)
    {
        
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.SALESTERM, salesTerm);
    }
    
    /**
     * Updates a Vendor.
     * The Vendor object represents the buyer from whom you purchase any service or product 
     * for your organization.
     * 
     * Specify all the parameters for the object, not just the new or changed elements.
     * If you omit an element, it is removed from the object by the update operation.
     * 
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Vendor">Vendor Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:update-vendor}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param vendor The vendor to be updated
     * @return The updated Vendor.
     */
    @Processor
    public Vendor updateVendor(String realmId,
                               String appKey,
                               String realmIdPseudonym, String authIdPseudonym,
                               @Optional @Default("#[payload]") Vendor vendor)
    {
        return client.update(realmId, appKey, realmIdPseudonym, authIdPseudonym,OnlineEntityType.VENDOR, vendor);
    }
    
    /**
     * Deletes an object.
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:delete-object}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param type EntityType of the object.
     * @param id Id which is assigned by Data Services when the object is created.
     * @param syncToken Integer that indicates how many times the object has been updated.
     *                  Before performing the update, Data Services verifies that the SyncToken in the
     *                  request has the same value as the SyncToken in the Data Service's repository.
     */
    @Processor
    public void deleteObject(String realmId,
                             String appKey,
                             String realmIdPseudonym, String authIdPseudonym,
                             OnlineEntityType type, 
                             @Optional @Default("#[payload]") IdType id, 
                             @Optional String syncToken)
    {
        client.deleteObject(realmId, appKey, realmIdPseudonym, authIdPseudonym,type, id, syncToken);
    }

    /**
     * Lazily retrieves Objects
     *
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/Vendor">Vendor Especification</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:find-objects}
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:find-objects2}
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:find-objects3}
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:find-objects4}
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:find-objects5}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param type EntityType of the object.
     * @param queryFilter String with a filter format (see details). Each type of object to be 
     *                    retrieved, has a list of attributes for which it can be filtered (See this 
     *                    list following the link in the details of the documentation of the create
     *                    or update method of that object).
     * @param querySort String with a sort format (see details). Each type of object to be 
     *                    retrieved, has a list of attributes for which it can be sorted (See this 
     *                    list following the link in the details of the documentation of the create
     *                    or update method of that object).
     * @return Iterable of the objects to be retrieved.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @SuppressWarnings("rawtypes")
    @Processor
    public Iterable findObjects(String realmId,
                                String appKey,
                                String realmIdPseudonym, String authIdPseudonym,
                                OnlineEntityType type, 
                                @Optional String queryFilter,
                                @Optional String querySort)
    {
        return client.findObjects(realmId, appKey, realmIdPseudonym, authIdPseudonym,type, queryFilter, querySort);
    }
    
    /**
     * Gets all of the transactions and objects that have been deleted on the Data Services server
     *
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/ChangeDataDeleted">ChangeDataDeleted</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:change-data-deleted}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @param queryFilter String with a filter format (see details). Each type of object to be 
     *                    retrieved, has a list of attributes for which it can be filtered (See this 
     *                    list following the link in the details of the documentation of the create
     *                    or update method of that object).
     * @param querySort String with a sort format (see details). Each type of object to be 
     *                    retrieved, has a list of attributes for which it can be sorted (See this 
     *                    list following the link in the details of the documentation of the create
     *                    or update method of that object).
     * @return Iterable of the objects to be retrieved.
     * 
     * @throws QuickBooksRuntimeException when there is a problem with the server. It has a code 
     *         and a message provided by quickbooks about the error.
     */
    @SuppressWarnings("rawtypes")
    @Processor
    public Iterable changeDataDeleted(String realmId,
                                String appKey,
                                String realmIdPseudonym, String authIdPseudonym,
                                @Optional String queryFilter,
                                @Optional String querySort)
    {
        return client.findObjects(realmId, appKey, realmIdPseudonym, authIdPseudonym, OnlineEntityType.CHANGEDATADELETED, queryFilter, querySort);
    }
    
    /**
     * Returns current user information such as first name, last name, and email address.
     *
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/
     * 0025_Intuit_Anywhere/0060_Reference/Current_User_API">CurrentUserAPI</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:get-current-user}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @return current user information
     * 
     */
    @Processor
    public UserInformation getCurrentUser(String realmId,
                                String appKey,
                                String realmIdPseudonym, String authIdPseudonym)
    {
        return client.getCurrentUserInformation(realmId, appKey, realmIdPseudonym, authIdPseudonym);
    }
    
    /**
     * Returns company metadata information.
     *
     * For details see: 
     * <a href="https://ipp.developer.intuit.com/0010_Intuit_Partner_Platform/0050_Data_Services/
     * 0400_QuickBooks_Online/CompanyMetaData">CompanyMetaData</a>
     * 
     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:get-company-metadata}
     *
     * @param realmId The realmID, also known as the Company ID, uniquely identifies the data for a company.
     *                In QuickBooks Online, the Company ID  appears on the My Account page.
     *                In Data Services for QuickBooks Online, the realmID is required in the URL for most calls.
     * @param appKey Application Id.
     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
     * @return company metadata
     * 
     */
    @Processor
    public Object getCompanyMetadata(String realmId,
                                String appKey,
                                String realmIdPseudonym, String authIdPseudonym)
    {
        return client.get(realmId, appKey, realmIdPseudonym, authIdPseudonym, 
                OnlineEntityType.COMPANY_METADATA);
    }
    
//    /**
//     * Gets a new accessToken from Quickbooks. It will expire in an hour.
//     * 
//     * {@sample.xml ../../../doc/mule-module-quick-books-online.xml.sample quickbooks:get-access-token}
//     *
//     * @param appKey Application Key
//     * @param realmIdPseudonym Pseudonym Realm Id, obtained from the gateway that represents the company.
//     * @param authIdPseudonym Pseudonym Auth Id, obtained from the gateway that represents the user.
//     * @return String that represents the accessToken required in every processor.
//     */
//    @Processor
//    public String getAccessToken(String appKey, String realmIdPseudonym, String authIdPseudonym)
//    {
//        return client.getAccessTokensFromSaml(appKey, realmIdPseudonym, authIdPseudonym);
//    }
    /**
     * 
     */
    @PostConstruct
    public void init()
    {
        if (client == null )
        {
            client = new DefaultQuickBooksOnlineClient(baseUri, serviceProviderId);
        }
    }
    
    public void setBaseUri(String baseUri)
    {
        this.baseUri = baseUri;
    }
    
    public String getBaseUri()
    {
        return baseUri;
    }

    public QuickBooksOnlineClient getClient() {
        return client;
    }

    public void setClient(QuickBooksOnlineClient client) {
        this.client = client;
    }

    public String getServiceProviderId() {
        return serviceProviderId;
    }

    public void setServiceProviderId(String serviceProviderId) {
        this.serviceProviderId = serviceProviderId;
    }
}
